quit
n
 exit_arround?(p)
p
c
p
c
p
c
p
c
exit_arround?(p)
p
c
p
c
p
c
exit_arround?(p)
p
quit
is_exit?(send(:right,p))
is_exit?(send(:rigth,p))
exit_arround?(p)
p
c
p
c
p
c
p
c
p
c
cp
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
p
c
exit_arround?(p)
exit_arround(p)
p
quit
node_queue
c
n
find_adjacents(node_queue.first)
node_queue
c
n
quit
current_pos
find_adjacents({:y=>3, :x=>3})
node_queue.first
find_adjacents(node_queue.first)
find_adjacents(node_queue.first).empty?
n
node_queue.first
quit
c
visited_nodes
traveled_path
n
traveled_path
n
quit
current_pos
visited_nodes
visited_nodes.include?(p)
p
n
current_pos
traveled_path
visited_nodes
p
c
visited_nodes.include?(p)
p
c
quit
visited_nodes
traveled_path
adjacents.include?current_pos
current_pos
node_queue
visited_nodes
adjacents
n
find_adjacents(current_pos)
quit
visited_nodes
adjacents
find_adjacents(current_pos).each do |p| visited_nodes.include?(p) end
find_adjacents(current_pos).each do |p| ; visited_nodes.include?(p); end
current_pos
visited_nodes.include?(current_pos)
node_queue
visited_nodes
adjacents
quit
find_adjacents(current_pos)
current_pos
node_queue
n
node_queue
n
quit
node_queue
find_adjacents(node_queue.shift)
node_queue.length > 0
node_queue
quit
node_queue
node_queue.shift
find_adjacents(node_queue.shift)
fiind_adjacents(node_queue.shift)
node_queue.length > 0
traveled_path
node_queue
visited_nodes
quit
adjacents
current_pos
pos
adjacents
n
permited_move?(pos,'left')
adjacents
n
pos
adjacents
n
permited_move?(pos,'up')
adjacents
pos
n
current_pos
pos
quit
current_pos
pos
n
permited_move?(pos,'up')
adjacents
current_pos
pos
n
pos
current_pos
quit
current_pos
adjacents
n
adjacents
n
adjacents
quit
current_pos
adjacents
quit
current_pos
adjacents
quit
current_pos
adjacents
c
is_exit?(@current_pos)
is_exit?
@current_pos
@exit
c
@current_pos
@exit
c
q
@used_pos << ({y: 1, x: 0})
@used_pos.push({y: 1, x: 0})
@used_pos
n
continue
exit
ecit
exit
@current_pos[:y]
